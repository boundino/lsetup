# .bash_cms #

export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"

parse_git_branch() { git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/' ; }
howmanyme() { [[ $(who | grep -e ^$USER | wc -l) -gt 1 ]] && { echo ' ('$(who | grep -e ^$USER | wc -l)')'; } ; }
export PS1=$'\[\e[33m\]\u\[\e[33;2m\]:~\[\e[00m\] \[\e[34m\]\h\[\e[00m\] \[\e[34;2m\](${SCRAM_ARCH})\[\e[00m\]:\[\e[38;2;205;162;184m\]\w\[\e[00m\] \n\[\e[38;5;182;2m\]($CMSSW_VERSION):($(parse_git_branch)) \[\e[4m\]\D{%H:%M:%S}\[\e[00m\]\[\e[38;2;205;92;92m\]$(howmanyme)\[\e[00m\] \[\e[38;2;205;162;184m\]${PWD##*/}/\[\e[00m\] \[\e[38;2;170;170;170m\](\xE2\x9C\xBF \xCB\xB5\xE2\x97\x95 \xE2\x80\xBF \xE2\x97\x95\xCB\xB5)\[\e[00m\]$ '
export PS4=$'\[\e[38;2;165;255;170;1m\]L${LINENO} + \[\e[0m\]'

# ====== CMSSW / ROOT ====== #

alias root='root -l'
alias condorq='condor_q '$USER' | grep Total'

function grid_setup() {
    which grid-proxy-info
    POSITIONAL_ARGS=()
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--force)
                FORCE=YES
                shift # past argument
                ;;
            *)
                POSITIONAL_ARGS+=("$1") # save positional arg
                shift # past argument
                ;;
        esac
    done
    set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

    [[ $(ls -lt /tmp/ | grep --color=no "$USER " | grep --color=no -m 1 x509)x == x || $FORCE == YES ]] && voms-proxy-init --voms cms --valid 168:00
    EXISTPROXY=$(ls /tmp/ -lt | grep $USER | grep -m 1 x509 | awk '{print $NF}')
    cp /tmp/$EXISTPROXY $HOME/
    voms-proxy-info --all
}
export -f grid_setup
function crab_setup() {
    grid_setup
    source /cvmfs/cms.cern.ch/crab3/crab.sh
    echo -e "\e[32;1m$(which crab)\e[0m"
}
export -f crab_setup

alias bril_setup='export PATH=$HOME/.local/bin:/afs/cern.ch/cms/lumi/brilconda-1.0.3/bin:$PATH'
# svn
alias gitlabinit='eval `utils/tdr runtime -sh`'
alias buildan='tdr --style=an --temp_dir=$PWD/tmp b'
alias buildpaper='tdr --style=paper --temp_dir=$PWD/tmp b'

function cmsphbook() {
    [[ $# -ne 1 ]] && { echo "usage: cmsphbook [people, whoami, site-names, site-resources]. " ; return ; }
    category=${1:-people} # people, whoami, site-names, site-resources
    curl -ks --cert $(voms-proxy-info -path) --key $(voms-proxy-info -path) "https://cmsweb.cern.ch/sitedb/data/prod/$category"
}

# docmsenv
alias cmsver='echo $CMSSW_BASE ; echo $CMSSW_RELEASE_BASE ;'
function docmsenv() {
    oldpwd=$OLDPWD
    thispwd=$PWD
    ver=${1}
    # [[ $# -eq 0 ]] && { ver=10_3_3_patch1 ; }
    [[ -d ~/CMSSW_${ver} ]] && { cd ~/CMSSW_${ver}/src; cmsenv; echo "$CMSSW_VERSION ==> $PWD"; cd $oldpwd; cd $thispwd; }
    [[ $# -eq 0 ]] && { for i in `ls --color=auto -r -d ~/CMSSW_*` ; do cd $i/src/; cmsenv; echo "$CMSSW_VERSION ==> $PWD"; cd $oldpwd; cd $thispwd; break; done; }
}
export -f docmsenv

alias sitelist='[[ -f ~/.sites ]] && catt ~/.sites'

# toolkit
. $HOME/lsetup/toolkit/gfalxrd.shinc
alias daslumi='python3 $HOME/lsetup/toolkit/daslumi.py'
. $HOME/lsetup/toolkit/dassummary.shinc
. $HOME/lsetup/toolkit/checkproxy.shinc
